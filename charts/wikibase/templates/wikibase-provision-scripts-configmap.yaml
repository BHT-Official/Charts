{{- if and .Values.wikibase.enabled .Values.wikibase.jobrunner.enabled -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: wikibase-provision-scripts
  labels:
    {{- include "wikibase.labels" . | nindent 4 }}
data:
  entrypoint.sh: |
    #!/bin/bash
    # This file is provided by the wikibase/wikibase docker image.

    # Test if required environment variables have been set
    REQUIRED_VARIABLES=(MW_ADMIN_NAME MW_ADMIN_PASS MW_ADMIN_EMAIL MW_WG_SECRET_KEY DB_SERVER DB_USER DB_PASS DB_NAME)
    for i in "${REQUIRED_VARIABLES[@]}"; do
        eval THISSHOULDBESET=\$"$i"
        if [ -z "$THISSHOULDBESET" ]; then
        echo "$i is required but isn't set. You should pass it to docker. See: https://docs.docker.com/engine/reference/commandline/run/#set-environment-variables--e---env---env-file";
        exit 1;
        fi
    done

    set -eu

    # Wait for the db to come up
    /wait-for-it.sh "$DB_SERVER" -t 300
    # Sometimes it appears to come up and then go back down meaning MW install fails
    # So wait for a second and double check!
    sleep 1
    /wait-for-it.sh "$DB_SERVER" -t 300

    # Do the mediawiki install (only if LocalSettings doesn't already exist)
    if [ ! -e "/var/www/html/LocalSettings.php" ]; then
        php /var/www/html/maintenance/install.php --dbuser "$DB_USER" --dbpass "$DB_PASS" --dbname "$DB_NAME" --dbserver "$DB_SERVER" --lang "$MW_SITE_LANG" --pass "$MW_ADMIN_PASS" "$MW_SITE_NAME" "$MW_ADMIN_NAME"
        php /var/www/html/maintenance/resetUserEmail.php --no-reset-password "$MW_ADMIN_NAME" "$MW_ADMIN_EMAIL"

        # Copy our LocalSettings into place after install from the template
        # https://stackoverflow.com/a/24964089/4746236
        export DOLLAR='$'
        envsubst < /LocalSettings.php.template > /var/www/html/LocalSettings.php

        # Run update.php to install Wikibase
        php /var/www/html/maintenance/update.php --quick

        # Run extrascripts on first run
        if [ -f /app/extra-install.sh ]; then
            # shellcheck disable=SC1091
            source /app/extra-install.sh
        fi
    fi

    # Copy LocalSettings.php to a shared directory, if the image is being used with this shared directory existing
    # This is generally only done for the docker-compose example which currently works out of the box
    # This is used to share a install generated LocalSettings.php with a job runner on first run for example
    if [[ -d "/var/shared-localsettings" ]] && [[ -e "/var/www/html/LocalSettings.php" ]]
    then
        echo "/var/shared-localsettings & /var/www/html/LocalSettings.php found, so copying LocalSetting.php into shared directory"
        cp /var/www/html/LocalSettings.php /var/shared-localsettings/LocalSettings.php
    fi

    # Run the actual entry point
    docker-php-entrypoint apache2-foreground
  jobrunner-entrypoint.sh: |
    #!/bin/bash

    # Originally inspired by Brennen Bearnes jobrunner entrypoint
    # https://gerrit.wikimedia.org/r/plugins/gitiles/releng/dev-images/+/refs/heads/master/common/jobrunner/entrypoint.sh

    # Wait for the db to come up
    /wait-for-it.sh "$DB_SERVER" -t 300
    # Sometimes it appears to come up and then go back down meaning MW install fails
    # So wait for a second and double check!
    sleep 1
    /wait-for-it.sh "$DB_SERVER" -t 300

    kill_runner() {
      kill "$PID" 2> /dev/null
    }
    trap kill_runner SIGTERM

    while true; do
      if [ -e /shared/LocalSettings.php ]; then
        php maintenance/runJobs.php --wait --maxjobs="$MAX_JOBS" --conf /shared/LocalSettings.php &
        PID=$!
        wait "$PID"
      else
        echo "LocalSettings.php not shared yet - waiting for 10 seconds."
        sleep 10
      fi
    done
  LocalSettings.php: |
    <?php

    /*******************************/
    /* Enable Federated properties */
    /*******************************/
    #$wgWBRepoSettings['federatedPropertiesEnabled'] = true;

    /*******************************/
    /* Enables ConfirmEdit Captcha */
    /*******************************/
    #wfLoadExtension( 'ConfirmEdit/QuestyCaptcha' );
    #$wgCaptchaQuestions = [
    #  'What animal' => 'dog',
    #];

    #$wgCaptchaTriggers['edit']          = true;
    #$wgCaptchaTriggers['create']        = true;
    #$wgCaptchaTriggers['createtalk']    = true;
    #$wgCaptchaTriggers['addurl']        = true;
    #$wgCaptchaTriggers['createaccount'] = true;
    #$wgCaptchaTriggers['badlogin']      = true;

    /*******************************/
    /* Disable UI error-reporting  */
    /*******************************/
    #ini_set( 'display_errors', 0 );
  extra-install.sh: |
    #!/bin/bash
    set -ex

    # Enables and configures elasticsearch index
    bash /extra-install/ElasticSearch.sh

    # Creates an OAuth consumer for quickstatements
    bash /extra-install/QuickStatements.sh
{{- end -}}
